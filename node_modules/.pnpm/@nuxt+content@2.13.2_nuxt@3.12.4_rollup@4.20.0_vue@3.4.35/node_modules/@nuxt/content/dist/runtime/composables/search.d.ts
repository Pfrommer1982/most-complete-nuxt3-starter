import { type Options as MiniSearchOptions } from 'minisearch';
import { type MaybeRefOrGetter, type Ref } from '#imports';
export declare const defineMiniSearchOptions: <DataItem>(options: MiniSearchOptions<DataItem>) => Ref<{
    fields: string[];
    idField?: string;
    storeFields?: string[];
    extractField?: ((document: DataItem, fieldName: string) => string) | undefined;
    tokenize?: (text: string, fieldName?: string) => string[];
    processTerm?: (term: string, fieldName?: string) => string | string[] | null | undefined | false;
    logger?: (level: "error" | "debug" | "info" | "warn", message: string, code?: string) => void;
    autoVacuum?: boolean | {
        batchSize?: number;
        batchWait?: number;
        minDirtCount?: number;
        minDirtFactor?: number;
    } | undefined;
    searchOptions?: {
        fields?: string[];
        filter?: (result: import("minisearch").SearchResult) => boolean;
        boost?: {
            [fieldName: string]: number;
        };
        weights?: {
            fuzzy: number;
            prefix: number;
        } | undefined;
        boostDocument?: (documentId: any, term: string, storedFields?: Record<string, unknown>) => number;
        prefix?: boolean | ((term: string, index: number, terms: string[]) => boolean);
        fuzzy?: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number);
        maxFuzzy?: number;
        combineWith?: import("minisearch").CombinationOperator;
        tokenize?: (text: string) => string[];
        processTerm?: (term: string) => string | string[] | null | undefined | false;
        bm25?: {
            k: number;
            b: number;
            d: number;
        } | undefined;
    } | undefined;
    autoSuggestOptions?: {
        fields?: string[];
        filter?: (result: import("minisearch").SearchResult) => boolean;
        boost?: {
            [fieldName: string]: number;
        };
        weights?: {
            fuzzy: number;
            prefix: number;
        } | undefined;
        boostDocument?: (documentId: any, term: string, storedFields?: Record<string, unknown>) => number;
        prefix?: boolean | ((term: string, index: number, terms: string[]) => boolean);
        fuzzy?: boolean | number | ((term: string, index: number, terms: string[]) => boolean | number);
        maxFuzzy?: number;
        combineWith?: import("minisearch").CombinationOperator;
        tokenize?: (text: string) => string[];
        processTerm?: (term: string) => string | string[] | null | undefined | false;
        bm25?: {
            k: number;
            b: number;
            d: number;
        } | undefined;
    } | undefined;
}>;
export declare const searchContent: <DataItem>(search: MaybeRefOrGetter<string>, options?: {
    miniSearch?: MaybeRefOrGetter<MiniSearchOptions<DataItem>>;
}) => Promise<import("vue").ComputedRef<import("minisearch").SearchResult[]>>;
