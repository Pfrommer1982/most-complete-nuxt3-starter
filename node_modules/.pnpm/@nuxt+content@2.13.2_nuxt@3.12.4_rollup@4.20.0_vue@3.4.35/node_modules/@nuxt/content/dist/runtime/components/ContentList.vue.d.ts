import { type PropType, type VNode } from 'vue';
import type { ParsedContent, QueryBuilderParams } from '@nuxt/content';
declare const ContentList: import("vue").DefineComponent<{
    /**
     * Query props
     */
    /**
     * The path of the content to load from content source.
     * @default '/'
     */
    path: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    /**
     * A query builder params object to be passed to <ContentQuery /> component.
     */
    query: {
        type: PropType<QueryBuilderParams>;
        required: false;
        default: undefined;
    };
}, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Query props
     */
    /**
     * The path of the content to load from content source.
     * @default '/'
     */
    path: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    /**
     * A query builder params object to be passed to <ContentQuery /> component.
     */
    query: {
        type: PropType<QueryBuilderParams>;
        required: false;
        default: undefined;
    };
}>>, {
    path: string;
    query: any;
}, {}>;
declare const _default: typeof ContentList & {
    new (): {
        $slots: {
            default: (context: {
                list: ParsedContent[];
                refresh: () => Promise<void>;
            }) => VNode[] | undefined;
        };
    };
};
export default _default;
